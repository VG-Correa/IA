# -*- coding: utf-8 -*-
"""testeIA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XdMwEsNhiSmp-a78_-b-kWuQ6XBR5GW0
"""

import random
import math
import os

def cls():
    os.system("cls")

def sigmoid(x):
    return 1 / (1 + math.exp(-x))

global log
log = False



def tanh(x):
    return math.tanh(x)

class Neuronio:
    def __init__(self,nome):
        self.nome = nome
        self.bias = random.randint(0,100)/1000
        self.limite = 0
        self.libido = 0
        self.axonios = []

        self.init_limite()

        global log
        if log:
            print("--Neurônio criado--")
            print("Nome: ", self.nome)
            print("bias: ", self.bias)
            print("limite: ", self.limite)
            print("libido: ", self.libido)
            print("Axonios: ", self.axonios)
            print('-'*40)

    def init_limite(self):
        self.limite = random.randint(0,1000)/1000

    def receive_pulse(self, valor):
        global log
        if log:
            print("="*40)
            print(f"Neuronio {self.nome} recebeu pulso de {valor}")
            print(f'Libido era de: {self.libido}')
            print(f'Limite é de: ', self.limite)
        self.libido += valor
        if log:
            print(f'Libido ficou em: {self.libido}')
            print("="*40)

    def pulse(self):
        global log
        if log:
            print("="*40)
            print(f"Neuronio {self.nome} tentando pulsar")
            print(f"Libido é de {self.libido}")
            print(f"Bias é de {self.bias}")
            print(f"Limite é de {self.limite}")

        self.libido = tanh(self.libido + self.bias)

        if log:
            print(f"Libido + bias: {self.libido}")

        if self.libido >= self.limite:
            if log:
                print(f"--Neuronio {self.nome} pulsando--")
            [axonio.pulse(1) for axonio in self.axonios]
        else:
            if log:
                print(f'Neuronio {self.nome} NÃO conseguiu pulsar')
        self.libido = 0

    def mutar(self,chance):
        global log
        if log:
            print("="*40)
            print(f"Neuronio: {self.nome} tentando mutar")

        for axonio in self.axonios:
            if log:
                print("="*20)
                print(f"Axonio: {axonio} tentando mutar")
                print(f'Peso: {axonio.peso}')
            if (random.randint(0,1000)/1000) < chance:
                if log:
                    print(f"-Axonio {axonio} mutado!-")
                    print('Peso antigo: ', axonio.peso)
                axonio.peso = random.randint(0,2000)/1000
                if log:
                    print("Novo peso: ", axonio.peso)

        if (random.randint(0, 1000) / 1000) < chance:
            if log:
                print(f'-Neuronio {self.nome} mutado"-')
                print(f'Limite antigo: ', self.limite)
            self.init_limite()
            if log:
                print("Novo Limite: ", self.limite)
            if (random.randint(0, 1000) / 1000) < chance:
                if log:
                    print("--Bias mutado--")
                    print("Bias antigo: ", self.bias)
                self.bias = random.randint(0,100)/1000
                if log:
                    print("Novo bias: ", self.bias)

    def __str__(self) -> None:
        return self.nome

class Axonio:
    def __init__(self, nome, peso, neuronio: Neuronio, next_neuronio: Neuronio):
        self.nome = nome
        self.peso = peso
        self.neuronio = neuronio
        self.next_neuronio = next_neuronio

        global log
        if log:
            print(f"--Axonio criado--")
            print("Nome: ", self.nome)
            print("Neuronio: ", self.neuronio)
            print("Next Neuronio: ", self.next_neuronio)
            print("Peso: ", self.peso)
            print('-'*40)

    def pulse(self, valor):
        global log
        if log:
            print("="*40)
            print(f"--Axonio {self.nome} recebendo pulso--")
            print(f'Pulso {valor} * peso: {self.peso}')
        sinapse = valor * self.peso
        if log:
            print(f'Sinapse = {sinapse}')
            print(f'Neuronio: {self.neuronio} disparou {sinapse} para {self.next_neuronio}')

        self.next_neuronio.receive_pulse(sinapse)

    def __str__(self):
        return self.nome

class Neuronio_Output(Neuronio):
    def __init__(self,nome, função) -> None:
        super().__init__(nome)
        self.função = função

    def pulse(self):
        global log
        if log:
            print("=" * 40)
            print(f"Neuronio {self.nome} tentando pulsar")
            print(f"Libido é de {self.libido}")
            print(f"Bias é de {self.bias}")
            print(f"Limite é de {self.limite}")

        self.libido = tanh(self.libido + self.bias)
        if log:
            print(f"Libido + bias: {self.libido}")

        if self.libido >= self.limite:
            if log:
                print(f"--Neuronio {self.nome} pulsando--")
                print(f"Função {self.função.__str__()} ativada")
            self.função()
        else:
            if log:
                print(f'Neuronio {self.nome} NÃO conseguiu pulsar')
        

class Cerebro:
    def __init__(self, nome, quantidade_entradas=1, estrutura_neural=[3,3], saídas=[], chance_mutacao = 0.25) -> None:
        self.nome = nome
        self.quantidade_entradas = quantidade_entradas
        self.estrutura_neural = estrutura_neural
        self.saídas = saídas
        self.rede_neural = []
        self.set_rede_neural()
        self.Set_Axonios()
        self.chance_mutacao = chance_mutacao


    def set_rede_neural(self):
        neuronios_entrada = []

        for neuronio_entrada in range(self.quantidade_entradas):
            neuronios_entrada.append(Neuronio(f'N_E_{neuronio_entrada}'))

        self.rede_neural.append(neuronios_entrada)

        profundidade = []
        for profundidade_neuronios in range(self.estrutura_neural[1]):
            col_neuronios = []
            for neuronio in range(self.estrutura_neural[0]):
                col_neuronios.append(Neuronio(f"N_I_{profundidade_neuronios}_{neuronio}"))
            profundidade.append(col_neuronios)

        self.rede_neural.append(profundidade)

        neuronios_outputs = []

        id = 0
        for neuronio_output in self.saídas:
            neuronios_outputs.append(Neuronio_Output(f'N_O_{id}',neuronio_output))
            id += 1

        self.rede_neural.append(neuronios_outputs)


    def Set_Axonios(self):

        for n_entrada in self.rede_neural[0]:
            for n_nucleo in self.rede_neural[1][0]:
                n_entrada.axonios.append(Axonio(f'{n_entrada}_AX_{n_nucleo}',random.randint(0,2000)/1000,n_entrada,n_nucleo))

        for index, col_neuronio in enumerate(self.rede_neural[1]):
            for neuronio1 in col_neuronio:
                id = index + 1
                try:
                    for neuronio2 in self.rede_neural[1][index + 1]:
                        neuronio1.axonios.append(Axonio(f'{neuronio1}_AX_{neuronio2}',random.randint(0,2000)/1000,neuronio1,neuronio2))

                except:
                    for neuronioOut in self.rede_neural[2]:
                        neuronio1.axonios.append(Axonio(f'{neuronio1}_AX_{neuronioOut}',random.randint(0,2000)/1000,neuronio1,neuronioOut))

    def pulse(self,pulso:list[int] = []):

        for index, neuronio in enumerate(self.rede_neural[0]):
            neuronio.receive_pulse(pulso[index])

        for col_neuronios in self.rede_neural[1]:
            [neuronio.pulse() for neuronio in col_neuronios]

        for neuronioOut in self.rede_neural[2]:
            neuronioOut.pulse()

    def mutar(self):
        for neuronio in self.rede_neural[0]:
            neuronio.mutar(self.chance_mutacao)
        for col_neuronio in self.rede_neural[1]:
            for neuronio in col_neuronio:
                neuronio.mutar(self.chance_mutacao)
        for neuronio in self.rede_neural[2]:
            neuronio.mutar(self.chance_mutacao)

global resp

resp = 'nada'

def um():
    global resp
    resp = "um"

def zero():
    global resp
    resp = "zero"


# cerebro = Cérebro('Cerebro',1,[6,6],[um,zero],0.05)
# # log = True

# cont = 0
# random.seed(10)

# zero = False
# um = False

# Pontos = 0
# Acertos = 0
# Erros = 0

# while Pontos <= 10:
#     cls()
#     cont += 1
#     zero_antes = zero
#     um_antes = um

#     # print("="*40)

#     cerebro.pulse([0])
#     if resp == "zero":
#         zero = True
#         # print("Teste 0: ", resp)
#     else:
#         zero = False


#     cerebro.pulse([1])
#     if resp == "um":
#         um = True
#         # print("Teste 1: ", resp)
#     else:
#         um = False


#     if zero and um:
#         resp = 'aprendeu'
#         # print(f"FIM | zero: {zero} | um: {um}")
#         Pontos += 1
#         Acertos +=1
#         print(f"Contagem: {cont}\nPontos: {Pontos} | +1\nAcertos: {Acertos} {Acertos/cont:.3}\nErros: {Erros} {Erros/cont:.3}")
#     else:
#         zero = False
#         um = False
#         Pontos -= 1
#         Erros += 1
#         cerebro.mutar()
#         print(f"Contagem: {cont}\nPontos: {Pontos} | -1\nAcertos: {Acertos} {Acertos/cont:.3}\nErros: {Erros} {Erros/cont:.3}")
#         Pontos = -10 if Pontos < -10 else Pontos

# print("="*20)
# print('Contagem: ',cont)
# print('Pontos: ',Pontos)

# if resp == "aprendeu":
#     print("Aprendeu!")
#     log = False

#     cerebro.pulse([0])
#     print("teste com 0")
#     print(resp)
#     cerebro.pulse([0])
#     print("teste com 0")
#     print(resp)
#     cerebro.pulse([1])
#     print("teste com 1")
#     print(resp)
#     cerebro.pulse([1])
#     print("teste com 1")
#     print(resp)

# else:
#     print("Não aprendeu!")
#     print(resp)
